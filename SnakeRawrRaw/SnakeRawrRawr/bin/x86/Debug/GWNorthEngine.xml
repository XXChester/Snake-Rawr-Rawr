<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GWNorthEngine</name>
    </assembly>
    <members>
        <member name="T:GWNorthEngine.Model.Base2DSpriteDrawable">
            <summary>
            Models the basis of every SpriteBatch drawable object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.position">
            <summary>
            Position of the sprite
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.origin">
            <summary>
            Sprites origin used for rotation
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.scale">
            <summary>
            Scale of the sprite
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.rotation">
            <summary>
            Rotation of the sprite
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.layer">
            <summary>
            Layer the sprite is to be rendered at
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.lightColour">
            <summary>
            Colour to render the sprite in
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.spriteEffect">
            <summary>
            SpriteEffects to render the sprite with
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.renderingRectangle">
            <summary>
            Rendering rectangle
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Base2DSpriteDrawable.originalLightColour">
            <summary>
            Original colour the sprite was rendered in
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.#ctor(GWNorthEngine.Model.Params.Base2DSpriteDrawableParams)">
            <summary>
            Builds a basic SpriteBatch drawable item
            </summary>
            <param name="parms">BaseSpriteDrawableParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.setRenderingRectByTexture(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Sets the rendering rectangle based on the texture's bounds
            </summary>
            <param name="texture">Texture to base the Rendering Rectangle on</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.addEffect(GWNorthEngine.Model.Effects.BaseEffect)">
            <summary>
            Adds an effect to the list of effects
            </summary>
            <param name="effect">Effect object to add</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.addEffect(GWNorthEngine.Model.Effects.BaseEffect,GWNorthEngine.Model.Base2DSpriteDrawable)">
            <summary>
            Adds an effect to the list of effects
            </summary>
            <param name="effect">Effect object to add</param>
            <param name="reference">Object that the effect applies to</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.updateEffects(System.Single)">
            <summary>
            Updates the effects applied to a BaseStatic2DSpriteDrawable
            </summary>
            <param name="elapsed">Time elapsed sense the last call</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.update(System.Single)">
            <summary>
            Runs the Effects applied to the object
            </summary>
            <param name="elapsed">Time elapsed sense the last call</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Abstract method that forces the children objects to implement render
            </summary>
            <param name="spriteBatch">SpriteBatch object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Base2DSpriteDrawable.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Abstract method that forces the children objects to implement render
            </summary>
            <param name="spriteBatch">SpriteBatch object</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.Rotation">
            <summary>
            Gets or sets the rotational value for the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.Position">
            <summary>
            Gets or sets the position of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.Scale">
            <summary>
            Gets or sets the scale of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.LightColour">
            <summary>
            Gets or sets the Colour in which the sprite is to be rendered in
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.Origin">
            <summary>
            Gets or sets the Origin in which the sprite is rendered around
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.SpriteEffect">
            <summary>
            Gets or sets the SpriteEffects to rendering the object under
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.RenderingRectangle">
            <summary>
            Gets or sets the Rectangle used for rendering the texture
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Base2DSpriteDrawable.Effects">
            <summary>
            Effects applied to this object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Line2D">
            <summary>
            Line class that simply draws a line to the screen
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Line2D.endPosition">
            <summary>
            Ending position of the Line
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Line2D.texture">
            <summary>
            Texture used to draw the line
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Line2D.#ctor(GWNorthEngine.Model.Params.Line2DParams)">
            <summary>
            Actual building of the line
            </summary>
            <param name="parms">Line2DParams object containing the data required to build the line</param>
        </member>
        <member name="M:GWNorthEngine.Model.Line2D.recalculateRotation">
            <summary>
            Recalculates the rotation based on the current starting and end positions of the line
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Line2D.recalculateScale">
            <summary>
            Recalculates the scale based on the current starting and end positions of the line
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Line2D.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Renders the sprite to the screen
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Model.Line2D.dispose">
            <summary>
            Disposes the texture used to draw the line
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Line2D.Position">
            <summary>
            Gets or sets the starting position of the line
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Line2D.EndPosition">
            <summary>
            Gets or sets the end position of the line
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.PulseDirection">
            <summary>
            Direction we are pulsing in
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.PulseDirection.Up">
            <summary>
            Pulse up
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.PulseDirection.Down">
            <summary>
            Pulse down
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.ClampableCamera2DParams">
            <summary>
            Models the data required to build a ClampableCamera2D object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.Camera2DParams">
            <summary>
            Models the data required to build a Camera2D object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera2DParams.StartingPosition">
            <summary>
            Gets or sets the starting position of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.ClampableCamera2DParams.MaxClamp">
            <summary>
            Gets or sets the Maximum values to clamp the camera at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.ClampableCamera2DParams.MinClamp">
            <summary>
            Gets or sets the Minimum values to clamp the camera at
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.SoundEngineSlider">
            <summary>
            Models the data of a SoundEngineSlider GUI element
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.Slider">
            <summary>
            Models a GUI Slider
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.BaseGUIElement">
            <summary>
            Models the data that every GUI element must have
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.BaseGUIElement.lightColour">
            <summary>
            Colour to render the element in
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.BaseGUIElement.content">
            <summary>
            ContentManager object
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.BaseGUIElement.position">
            <summary>
            Position the element resides at
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.BaseGUIElement.scale">
            <summary>
            Scale of the element
            </summary>
        </member>
        <member name="M:GWNorthEngine.GUI.BaseGUIElement.#ctor(GWNorthEngine.GUI.Params.BaseGUIElementParams)">
            <summary>
            Constructs a BaseGUIElement object based on the params object
            </summary>
            <param name="parms">BaseGUIElementParams object</param>
        </member>
        <member name="M:GWNorthEngine.GUI.BaseGUIElement.update(System.Single)">
            <summary>
            Updates the GUI element
            </summary>
            <param name="elapsed">Time elapsed since the last call</param>
        </member>
        <member name="M:GWNorthEngine.GUI.BaseGUIElement.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the GUI element
            </summary>
            <param name="spriteBatch">SpriteBatch object used for rendering</param>
        </member>
        <member name="M:GWNorthEngine.GUI.Slider.#ctor(GWNorthEngine.GUI.Params.SliderParams)">
            <summary>
            Constructs a Slider object based on the params object
            </summary>
            <param name="parms">SliderParams object</param>
        </member>
        <member name="M:GWNorthEngine.GUI.Slider.update(System.Single)">
            <summary>
            Updates the slider
            </summary>
            <param name="elapsed">Time elapsed since the last call</param>
        </member>
        <member name="M:GWNorthEngine.GUI.Slider.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the Slider
            </summary>
            <param name="spriteBatch">SpriteBatch object used for rendering</param>
        </member>
        <member name="P:GWNorthEngine.GUI.Slider.CurrentValue">
            <summary>
            Value of the slider between 0 and 1
            </summary>
        </member>
        <member name="M:GWNorthEngine.GUI.SoundEngineSlider.#ctor(GWNorthEngine.GUI.Params.SoundEngineSliderParams)">
            <summary>
            Constructs a SoundEngineSlider object based on the parms
            </summary>
            <param name="parms">SoundEngineSliderParams object</param>
        </member>
        <member name="M:GWNorthEngine.GUI.SoundEngineSlider.update(System.Single)">
            <summary>
            Updates the slider
            </summary>
            <param name="elapsed">Time elapsed since the last call</param>
        </member>
        <member name="M:GWNorthEngine.GUI.SoundEngineSlider.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the Slider
            </summary>
            <param name="spriteBatch">SpriteBatch object used for rendering</param>
        </member>
        <member name="P:GWNorthEngine.GUI.SoundEngineSlider.CurrentValue">
            <summary>
            Changes the volume of the sound engine, value is clamped between 0 and 1
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.DefaultPathFinder">
            <summary>
            Default path finding class
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.BasePathFinder">
            <summary>
            Abstract class containing the common information for basic A* Pathfinding
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.directions">
            <summary>
            Directions we can generate moves in
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.board">
            <summary>
            A* readable board representation
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.allowedToCutCorners">
            <summary>
            Determines if corner cutting is allowed
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.openList">
            <summary>
            List of open nodes
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.closedList">
            <summary>
            List of closed nodes
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.path">
            <summary>
            Path to the target from the starting position
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.end">
            <summary>
            Ending position in the board[,]
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.start">
            <summary>
            Starting position in the board[,]
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.tieBreakerRandom">
            <summary>
            Random number generator used to break ties in the path
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.directionRestrictionType">
            <summary>
            Type of restriction against the board on moves that we can generate
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.costs">
            <summary>
            Costs associated with the board's tiles
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.HEIGHT">
            <summary>
            Height of the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.WIDTH">
            <summary>
            Width of the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.DIRECTIONS_LENGTH">
            <summary>
            Length of directions we have
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.ABSOLUTE_PARENT_POSITION">
            <summary>
            Constant that defines the parent at the start of the linked list of path nodes
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.#ctor(GWNorthEngine.AI.AStar.Params.BasePathFinderParams)">
            <summary>
            Builds a BasePathFinder
            </summary>
            <param name="parms">BasePathFinderParams object containing the data requried to build the pathfinder</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.findPath(GWNorthEngine.AI.AStar.PathNode,System.Int32)">
            <summary>
            Finds a path based within the board if one is available
            </summary>
            <param name="parent">Parent node of the new nodes to be processed</param>
            <param name="parentsIndex">Index of the parent in the open list</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.getDistance(Microsoft.Xna.Framework.Point,GWNorthEngine.AI.AStar.PathNode,System.Int32@,System.Int32@)">
            <summary>
            Retrieves the start distance and the end distance from the current position
            </summary>
            <param name="currentPosition">Current position we are at in the search</param>
            <param name="parentNode">Node that will be the parent of this position we are determining the distance for</param>
            <param name="startDistance">Output the distance from the start</param>
            <param name="endDistance">Output the distance from the end</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.getDistanceToStart(Microsoft.Xna.Framework.Point,GWNorthEngine.AI.AStar.PathNode)">
            <summary>
            Gets the distance from the start based on the path we have already found and its associated costs
            </summary>
            <param name="currentPosition">Current tile position we are at</param>
            <param name="parentNode">Node that will be the parent of this position we are determining the distance for</param>
            <returns>G cost of the A* algorithm (The distance from the start)</returns>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.getDistance(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>
            Retrieves the distance from the current position and the specified position
            </summary>
            <param name="currentPosition">Current position we are at</param>
            <param name="comparePosition">Posiiton we are looking for the distance from</param>
            <returns></returns>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.getStartAndEnd">
            <summary>
            Figures out the starting and ending positions in the board
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.checkForTieBreakerAndResolvePath(System.Collections.Generic.List{GWNorthEngine.AI.AStar.PathNode}@)">
            <summary>
            Determines a path when there are 2 nodes with the same FScore
            </summary>
            <param name="surrondingCosts">Surronding nodes that we are looking at</param>
            <returns>Index of the node to use to carry on the search</returns>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.findPath">
            <summary>
            Finds a path from the starting position to the ending position if one exists
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BasePathFinder.findPath(GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace[0:,0:])">
            <summary>
            Finds a path from the starting position to the ending position if one exists
            </summary>
            <param name="board">Board to search through</param>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BasePathFinder.Path">
            <summary>
            Gets the path leading from the starting position to the ending position if there is one
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BasePathFinder.Costs">
            <summary>
            Gets or sets the class used to generate costs of the boards tiles
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BasePathFinder.Board">
            <summary>
            Gets or sets the A* readable board representation
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace">
            <summary>
            Type of spaces the board can contain
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.Start">
            <summary>
            Starting position on the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.Unwalkable">
            <summary>
            Non-moveable piece on the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.Walkable">
            <summary>
            Moveable piece on the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.End">
            <summary>
            Goal position on the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.VariableTerrainLowCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is low
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.VariableTerrainMediumCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is medium
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace.VariableTerrainHighCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is high
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.BasePathFinder.RestrictionType">
            <summary>
            Restriction type used for searching of the next node
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.RestrictionType.Restricted">
            <summary>
            Can only generates moves in a zig zag pattern, cannot cut corners or move diagonally
            </summary>
        </member>
        <member name="F:GWNorthEngine.AI.AStar.BasePathFinder.RestrictionType.None">
            <summary>
            Can generate moves in any direction
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.DefaultPathFinder.#ctor(GWNorthEngine.AI.AStar.Params.DefaultPathfinderParams)">
            <summary>
            Builds a DefaultPathFinder
            </summary>
            <param name="parms">DefaultPathFinderParams object containing the data required to build the PathFinder</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.DefaultPathFinder.findPath(GWNorthEngine.AI.AStar.PathNode,System.Int32)">
            <summary>
            Finds a path based within the board if one is available
            </summary>
            <param name="parent">Parent node of the new nodes to be processed</param>
            <param name="parentsIndex">Index of the parent in the open list</param>
        </member>
        <member name="T:GWNorthEngine.Utils.LoadingUtils">
            <summary>
            Contains helper methods for loading data from the file system
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.LoadingUtils.load``1(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
            <summary>
            Generic load which appends the asset name to the assets properties if the field is available
            </summary>
            <typeparam name="T">Type of object to load</typeparam>
            <param name="content">ContentManager object</param>
            <param name="assetName">Name of the asset to load from the content pipeline</param>
            <returns>T object</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.LoadingUtils.loadTexture2D(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.String)">
            <summary>
            Loads a Texture2D not via the Content pipeline
            </summary>
            <param name="device">active GraphicsDevice reference</param>
            <param name="fileNameWithPathAndExtension">Texute's name we are trying to load with the full path and file extension (Assets\Test.png)</param>
            <returns>Texture2D object</returns>
            <author>Largely based on http://jakepoz.com/jake_poznanski__speeding_up_xna.html </author>
        </member>
        <member name="T:GWNorthEngine.Tools.Translator">
            <summary>
            Translation utility between tool values and other engine components values
            </summary>
        </member>
        <member name="M:GWNorthEngine.Tools.Translator.translateTileValueToAStarType(GWNorthEngine.Tools.TilePlacer.TileValues)">
            <summary>
            Translates a TilePlacer.TileValue to an AI.AStar.PathFinder.TypeOfSpace value
            </summary>
            <param name="value">Tile placer value</param>
            <returns>AStar representation of the value passed in</returns>
        </member>
        <member name="M:GWNorthEngine.Tools.Translator.translateTileValueToAStarType(System.Int32)">
            <summary>
            Translates an int representation of a TilePlacer.TileValue to an AI.AStar.PathFinder.TypeOfSpace value
            </summary>
            <param name="value">Tile placer value</param>
            <returns>AStar representation of the value passed in</returns>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.PulseEffectParams">
            <summary>
            Models the data required for a pulse effect
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.BaseEffectParams">
            <summary>
            Models the common data between effects
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.PulseEffectParams.ScaleDownTo">
            <summary>
            Amount to scale down to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.PulseEffectParams.ScaleUpTo">
            <summary>
            Amount to scale up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.PulseEffectParams.ScaleBy">
            <summary>
            Amount to scale by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.AnimationState">
            <summary>
            Animation state of the object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationState.Paused">
            <summary>
            Animation is paused
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationState.PlayForward">
            <summary>
            Animation is playing forawrd
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationState.PlayReversed">
            <summary>
            Animation is playing in reverse
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationState.PlayForwardOnce">
            <summary>
            Animation plays through forward 1 time
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.Params.SoundEmitterParams">
            <summary>
            Models the data required to create a Sound Emitter
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.Params.SoundEmitterParams.#ctor">
            <summary>
            Builds a default SoundEmitterParams object with the following values\n
            Pan:		0f(Centered)
            Pitch:		0f(Unity)
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SoundEmitterParams.Position">
            <summary>
            Position the emitter is to be located at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SoundEmitterParams.Pan">
            <summary>
            Pan of the emitter
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SoundEmitterParams.Pitch">
            <summary>
            Pitch of the emitter
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SoundEmitterParams.EmittRadius">
            <summary>
            Emission raidus
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SoundEmitterParams.SFXEngine">
            <summary>
            Reference to the SFXEngine that will be used to emitt the sounds
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.SFXEngine">
            <summary>
            Sound effect engine, properly plays sound effects
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.BaseSoundEngine">
            <summary>
            Base implementation of a sound engine
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.BaseSoundEngine.#ctor(GWNorthEngine.Audio.Params.BaseSoundEngineParams)">
            <summary>
            Constructs a SoundEngine object based on the data passed in via the params object
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:GWNorthEngine.Audio.BaseSoundEngine.update">
            <summary>
            Monitors current Sound instances and flags them for cleanup if they have finished playing
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.BaseSoundEngine.Volume">
            <summary>
            Gets or sets the volume to play the audio at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.BaseSoundEngine.Muted">
            <summary>
            Gets or sets whether to play audio or not
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.SFXEngine.#ctor(GWNorthEngine.Audio.Params.SFXEngineParams)">
            <summary>
            Builds a SFXEngine based on the parameter objects data
            </summary>
            <param name="parms">SFXEngineParams object containing the data required to build the SFXEngine</param>
        </member>
        <member name="M:GWNorthEngine.Audio.SFXEngine.playSoundEffect(Microsoft.Xna.Framework.Audio.SoundEffect,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays a sound effect at a specific volume, pan and pitch
            </summary>
            <param name="sfx">Sound effect to play</param>
            <param name="volume">Volume to play the sound effect at</param>
            <param name="pan">Pan to play the sound effect at</param>
            <param name="pitch">Pitch to play the sound effect at</param>
            <param name="loop">Determines whether to loop the sound effect</param>
        </member>
        <member name="M:GWNorthEngine.Audio.SFXEngine.stop(System.String)">
            <summary>
            Stops all sound effects that match the name passed in and are not already stopped
            </summary>
            <param name="name">Name of the sound effect we are trying to stop</param>
        </member>
        <member name="M:GWNorthEngine.Audio.SFXEngine.isPlaying(System.String)">
            <summary>
            Determines if a SoundEffect is playing based on its name
            </summary>
            <param name="name">Name to look up</param>
            <returns>True if the sound if playing, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Audio.SFXEngine.update">
            <summary>
            Monitors current SoundEffectInstances and flags them for cleanup if they have finished playing
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.SFXEngine.Pan">
            <summary>
            Gets or sets the panning of the sound effects
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.SFXEngine.Pitch">
            <summary>
            Gets or sets the pitch of the sound effects
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.TransitionUtils">
            <summary>
            Helper methods for screen and object transitions
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.TransitionUtils.fadeOut(Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Fades out a colour over time
            </summary>
            <param name="colour">The constant colour of the object is rendered in</param>
            <param name="TOTAL_TIME_TO_TRANSITION">Constant value of the total transition time</param>
            <param name="elapsedTransitionTime">Time that has elapsed sense the transition started</param>
            <returns>Newly created colour to assign to the object for its next rendering pass</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.TransitionUtils.fadeIn(Microsoft.Xna.Framework.Color,System.Single,System.Single)">
            <summary>
            Fades in a colour over time
            </summary>
            <param name="colour">The constant colour of the object is rendered in</param>
            <param name="TOTAL_TIME_TO_TRANSITION">Constant value of the total transition time</param>
            <param name="elapsedTransitionTime">Time that has elapsed sense the transition started</param>
            <returns>Newly created colour to assign to the object for its next rendering pass</returns>
        </member>
        <member name="T:GWNorthEngine.Scripting.Utils.ObjectTranslator">
            <summary>
            Translates a string to the specified object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Utils.ObjectTranslator.translate(System.Type,System.String)">
            <summary>
            Translates a specific value to the specified data type
            </summary>
            <param name="translationType">type to translate to</param>
            <param name="value">string version of the data</param>
            <returns>Object translated to</returns>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.PulseEffect">
            <summary>
            Models the data required for a pulse effect
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.BaseEffect">
            <summary>
            Models the manditory fields for an effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.BaseEffect.#ctor(GWNorthEngine.Model.Effects.Params.BaseEffectParams)">
            <summary>
            Constructs a BaseEffect object based on the parms
            </summary>
            <param name="parms">BaseEffectParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.BaseEffect.update(System.Single)">
            <summary>
            Every effect must implement the update method
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.BaseEffect.Reference">
            <summary>
            Reference object LightColour that the effect is to apply to
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.PulseEffect.#ctor(GWNorthEngine.Model.Effects.Params.PulseEffectParams)">
            <summary>
            Constructs a PulseEffect object
            </summary>
            <param name="parms">PulseEffectParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.PulseEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.PulseEffect.ScaleDownTo">
            <summary>
            Amount to scale down to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.PulseEffect.ScaleUpTo">
            <summary>
            Amount to scale up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.PulseEffect.ScaleBy">
            <summary>
            Amount to scale by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.BaseParticle2DEmitterParams">
            <summary>
            Object containing the data required to build a BaseParticle2DEmitter object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Params.BaseParticle2DEmitterParams.#ctor">
            <summary>
            Constructs a basic BaseParticle2DEmitterParams object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DEmitterParams.SpawnDelay">
            <summary>
            Gets or sets the rate which a particle should be created at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DEmitterParams.ParticleTexture">
            <summary>
            Gets or sets the texture used for particle generation
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.DeacceleratingParticle">
            <summary>
            Models a particle that deaccelerates as its life progresses
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.BaseParticle2D">
            <summary>
            Models the basis of every particle
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.timeAlive">
            <summary>
            Time the particle is alive
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.timeToLive">
            <summary>
            Time the particle dies at
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.acceleration">
            <summary>
            Acceleration of the particle
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.direction">
            <summary>
            Direction the particle is headed in
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.texture">
            <summary>
            Texture of the particle
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2D.originalPosition">
            <summary>
            Original position of the particle
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2D.#ctor(GWNorthEngine.Model.Params.BaseParticle2DParams)">
            <summary>
            Builds the base particle
            </summary>
            <param name="parms">BaseParticle2DParams object containing the data required to build the particle</param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2D.update(System.Single)">
            <summary>
            Updates the particle. Be default it just updates the particles life
            </summary>
            <param name="elapsed">Time since the last time the method was called</param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2D.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Renders the sprite to the screen
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2D.TimeAlive">
            <summary>
            Gets or sets the time the particle is alive
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2D.TimeToLive">
            <summary>
            Gets or sets the maximum time the particle can live for
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2D.Acceleration">
            <summary>
            Gets or sets the acceleration of the particle
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2D.Direction">
            <summary>
            Gets or sets the directional value of the particle
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2D.Texture">
            <summary>
            Gets or sets the texture for the particle
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.DeacceleratingParticle.#ctor(GWNorthEngine.Model.Params.BaseParticle2DParams)">
            <summary>
            Constructs an Deaccelerating particle
            </summary>
            <param name="parms">BaseParticle2DParms object</param>
        </member>
        <member name="M:GWNorthEngine.Model.DeacceleratingParticle.update(System.Single)">
            <summary>
            Updates the particles position, loosing speed as its life progresses
            </summary>
            <param name="elapsed">Elapsed time</param>
        </member>
        <member name="T:GWNorthEngine.Model.Params.ColouredButtonParams">
            <summary>
            Params object containing the data required to build a coloured button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.StartX">
            <summary>
            Gets or sets the starting x positon of the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.StartY">
            <summary>
            Gets or sets the starting y position of the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.Width">
            <summary>
            Gets or sets the width of the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.Height">
            <summary>
            Gets or sets the height of the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.ID">
            <summary>
            Buttons ID used for determining if a button was clicked
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.LinesTexture">
            <summary>
            Gets or sets the lines texture
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.RegularColour">
            <summary>
            Gets or sets the regular light colour
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.MouseOverColour">
            <summary>
            Gets or sets the mouse over light colour
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.Font">
            <summary>
            Gets or sets the SpriteFont object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.Text">
            <summary>
            Gets or sets the text to be written inside the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ColouredButtonParams.TextsPosition">
            <summary>
            Gets or sets the Texts position
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.KeyFrameData">
            <summary>
            Models the data required for Key Frame Animation
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameData.#ctor(System.Int32,System.Int32,System.Single,System.String,System.Boolean)">
            <summary>
            Constructs a KeyFrameData object
            </summary>
            <param name="startingKeyFrame">Frame the animation starts at</param>
            <param name="endingKeyFrame">Frame the animation ends at</param>
            <param name="frameRate">Frame rate to run the animation set at</param>
            <param name="name">Name of the KeyFrameData</param>
            <param name="resetAnimationOnSet">Determines whether we want to rest the animation when we activate this object</param>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameData.Clone">
            <summary>
            Clones the KeyFrameData object
            </summary>
            <returns>Cloned KeyFrameData object</returns>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameData.StartingKeyFrame">
            <summary>
            Gets or sets the frame we start animating from
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameData.EndingKeyFrame">
            <summary>
            Gets or sets the frame we are to end with
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameData.FrameRate">
            <summary>
            Gets or sets the Frame Rate for the animation set
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameData.Name">
            <summary>
            Gets or sets the Name of the KeyFrameData
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameData.ResetAnimationOnSet">
            <summary>
            Gets or sets whether we want to reset the animation when we activate this KeyFrameData object
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.Params.BasePathFinderParams">
            <summary>
            Contains the common data required to build a A* Pathfinder
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.#ctor">
            <summary>
             Builds the default settings for setting up a PathFinder. The default settings are listed below.
             AllowCornerCutting:				False
             DirectionRestrictionType:			Restricted
             Costs:								new DefaultCosts()
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.Height">
            <summary>
            Gets or sets the height of the AI representation of the board
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.Width">
            <summary>
            Gets or sets the width of the AI representation of the board
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.AllowCornerCutting">
            <summary>
            Gets or sets whether corner cutting is allowed or not
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.DirectionRestrictionType">
            <summary>
            Gets or sets the Directional Restriction Type on the algorithm
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.Params.BasePathFinderParams.Costs">
            <summary>
            Gets or sets the governing costs object used by the algorithm
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.DefaultCosts">
            <summary>
            Default Cost implementation for variable terrain
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.BaseCosts">
            <summary>
            Base governing implementation of the cost module for determining tiles costs
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BaseCosts.#ctor(System.Single)">
            <summary>
            Builsd the basic cost class
            </summary>
            <param name="diagonalMultiplier">Multiplier used for diagonal movement determination</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BaseCosts.getDiagonalCost(System.Int32)">
            <summary>
            Determines the diagonal cost associated with a tile
            </summary>
            <param name="currentPositionsCost">Value if the tile were a straight move not a diagonal move</param>
            <returns>Diagonal cost of the tile</returns>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.BaseCosts.getCost(GWNorthEngine.AI.AStar.BasePathFinder.TypeOfSpace)">
            <summary>
            Determines the cost of a tile based on its type
            </summary>
            <param name="space"></param>
            <returns></returns>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BaseCosts.StandardCost">
            <summary>
            Cost of a standard Walkable tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BaseCosts.VariableTerrainLowCost">
            <summary>
            Cost of a Variable Terrain Low Cost tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BaseCosts.VariableTerrainMediumCost">
            <summary>
            Cost of a Variable Terrain Medium Cost tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BaseCosts.VariableTerrainHighCost">
            <summary>
            Cost of a Variable Terrain High Cost tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.BaseCosts.DiagonalMultiplier">
            <summary>
            Gets or sets the Diagonal Multiplier used for determining the cost of diagonal moves
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.DefaultCosts.#ctor">
            <summary>
            Constructs the DefaultClass implementation with a diagonal multiplier of 1.5f
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.DefaultCosts.StandardCost">
            <summary>
            Cost of a standard Walkable tile (cost: 10)
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.DefaultCosts.VariableTerrainLowCost">
            <summary>
            Cost of a Variable Terrain Low Cost tile (cost: StandardCost * 2)
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.DefaultCosts.VariableTerrainMediumCost">
            <summary>
            Cost of a Variable Terrain Medium Cost tile (cost: StandardCost * 3)
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.DefaultCosts.VariableTerrainHighCost">
            <summary>
            Cost of a Variable Terrain High Cost tile (cost: StandardCost * 4)
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.StringUtils">
            <summary>
            Helper methods for manipulating string values
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.StringUtils.scrubPathAndExtFromFileName(System.String)">
            <summary>
            Stribs the file path and extension (if they exist) off of a file name
            </summary>
            <param name="fileName">filename to alter</param>
            <returns>filename with the path and extension ripped off if they were present</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.StringUtils.scrubPathFromFileName(System.String)">
            <summary>
            Scrubs the directory information off of a file name
            </summary>
            <param name="fileName">filename to alter</param>
            <returns>filename with the path ripped off if it were present</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.StringUtils.scrubExtensionFromFilename(System.String)">
            <summary>
            Scrubs the file extension from a file name
            </summary>
            <param name="fileName">filename to alter</param>
            <returns>filename with the extension ripped off if it were present</returns>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.TileValues">
            <summary>
            Constant values for the TilePlacer tool
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.Unknown">
            <summary>
            Unknown tile value meaning the tile was left empty
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.BackGround">
            <summary>
            Background tile
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.NoMovements">
            <summary>
            Tile that you cannot pass through
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.SpawnPoint">
            <summary>
            Tiles that you stand on
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.Climbers">
            <summary>
            Tiles that you can climb
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.Walkable">
            <summary>
            Moveable piece on the board
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.VariableTerrainLowCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is low
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.VariableTerrainMediumCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is medium
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.TileValues.VariableTerrainHighCost">
            <summary>
            Variable terrain with a higher cost than standard with an extra cost that is high
            </summary>
        </member>
        <member name="T:GWNorthEngine.Scripting.ScriptManager">
            <summary>
            Singleton class that handles the recieving of input and disbatching it to the proper registered objects
            </summary>
        </member>
        <member name="F:GWNorthEngine.Scripting.ScriptManager.COMMAND_IDENTIFIER">
            <summary>
            Character used to describe what identifies a registered objects method such as test.help
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.#ctor">
            <summary>
            Default constructor which just alpha sorts the high level commands
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.getInstance">
            <summary>
            Retrieves the singleton instance variable
            </summary>
            <returns>Singleton of ScriptManager</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.help">
            <summary>
            Displays general help such as the command identifier, high level commands, and registered objects
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.log(System.String)">
            <summary>
            Logs a message from the console to the specified log file
            </summary>
            <param name="message">Message to log to the log file</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.lockOn(System.String)">
            <summary>
            Enables the ability to lock onto an object and move it around the screen with the mouse for map building purposes
            </summary>
            <param name="input">String representation of a boolean value</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.handleMouseMovement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Moves the locked onto object around the screen based on the mouses position
            </summary>
            <param name="mousePosition">Vector2 of the mouse position</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.handleMouseClick(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Handles the locking on and off of an object
            </summary>
            <param name="mousePosition">Vector2 of the mouse position used to find the object</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.getValue(System.Object)">
            <summary>
            Outputs the toString() of an object
            </summary>
            <param name="value">Object to execute the toString against</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.findAndExecute(System.String,System.Object@)">
            <summary>
            Finds the registered object and the method/property to execute
            </summary>
            <param name="input">Input from the console</param>
            <param name="output">Outputs the resulting object if a method/property returns one</param>
            <returns>true if we found a registered object and a method within that object</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.findObject(System.String,System.Object@)">
            <summary>
            Finds a registered object based on the reference name provided
            </summary>
            <param name="referenceName">Objects reference name to look up</param>
            <param name="output">Outputs the found RegisteredObject</param>
            <returns>true if we found a registered object, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.registerObject(System.Object,System.String)">
            <summary>
            Registers an object to be accessible via script from the console
            </summary>
            <param name="itemToRegister">Object to register available</param>
            <param name="referenceName">Name you want to use to access this object</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.ScriptManager.handleInput(System.String)">
            <summary>
            Handles the input received from the console window
            </summary>
            <param name="input">Input read in from the console window</param>
        </member>
        <member name="P:GWNorthEngine.Scripting.ScriptManager.LogFile">
            <summary>
             File that the script console will log too undet the "Log" command
            </summary>
        </member>
        <member name="P:GWNorthEngine.Scripting.ScriptManager.LockOnEnabled">
            <summary>
            Gets whether or not locking on is enabled
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.RotateOverTimeEffect">
            <summary>
            Models the data required for a rotate over time effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.RotateOverTimeEffect.#ctor(GWNorthEngine.Model.Effects.Params.RotateOverTimeEffectParams)">
            <summary>
            Constructs a ScaleOverTimeEffect
            </summary>
            <param name="parms">RotateOverTimeEffectParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.RotateOverTimeEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.RotateOverTimeEffect.RotateBy">
            <summary>
            Amount to rotate by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.ScrollingBackGround2DParams">
            <summary>
            Contains the data required to build a scrolling background
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ScrollingBackGround2DParams.Speed">
            <summary>
            Gets or Sets Speed in which the scene should scroll at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ScrollingBackGround2DParams.BackGrounds">
            <summary>
            Gets or sets the List of StaticDrawable2D background objects **NOTE**Positions are set in the scroller, just pass a basic list
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ScrollingBackGround2DParams.ScrollingDirection">
            <summary>
            Gets or sets the direction that the scene should scroll in
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.ScrollingBackGround2DParams.ViewPort">
            <summary>
            Gets or Sets the viewport the background is rendered in
            </summary>
        </member>
        <member name="T:GWNorthEngine.Engine.FrameRate">
            <summary>
            Frames per second class
            </summary>
        </member>
        <member name="M:GWNorthEngine.Engine.FrameRate.getInstance">
            <summary>
            Retrieves the singleton instance variable
            </summary>
            <returns></returns>
        </member>
        <member name="M:GWNorthEngine.Engine.FrameRate.calculateFrameRate(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Calculates and returns the frames per second
            </summary>
            <param name="gameTime">GameTime object</param>
            <returns>Current frames per second (FPS)</returns>
        </member>
        <member name="T:GWNorthEngine.Logic.Camera2D">
            <summary>
            Models the data required for a camera to be used in 2D space
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera2D.#ctor(GWNorthEngine.Logic.Params.Camera2DParams)">
            <summary>
            Builds a Camer2D object based on the Camera2DParams object passed in
            </summary>
            <param name="parms">Camera2DParams object containing the data required to build the camera</param>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera2D.update(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the cameras position by the amount pass in
            </summary>
            <param name="moveBy">Amount to move the camera by</param>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera2D.Position">
            <summary>
            Gets the position of the camera
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.Params.SliderParams">
            <summary>
            Models the data required to build a GUI Slider
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.Params.BaseGUIElementParams">
            <summary>
            Models the basic information required to build any GUI element
            </summary>
        </member>
        <member name="M:GWNorthEngine.GUI.Params.BaseGUIElementParams.#ctor">
            <summary>
            Constructs a basic BaseGUIElementParams object
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.BaseGUIElementParams.LightColour">
            <summary>
            Colour to render the element in
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.BaseGUIElementParams.Content">
            <summary>
            ContentManager object
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.BaseGUIElementParams.Position">
            <summary>
            Position the GUI element is to reside at
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.BaseGUIElementParams.Scale">
            <summary>
            Scale of the GUI element
            </summary>
        </member>
        <member name="M:GWNorthEngine.GUI.Params.SliderParams.#ctor">
            <summary>
            Constructs a default SliderParams object with the default values below;
            Scale(Bar):		Vector2(4f,1f)
            BallScale:		Vector2(1f)
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SliderParams.CurrentValue">
            <summary>
            Intitial value (between 0 and 1)
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SliderParams.BallScale">
            <summary>
            Scale of the ball
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SliderParams.Font">
            <summary>
            Font to write the % with
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SliderParams.BallColour">
            <summary>
            Colour ofthe Ball
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SliderParams.BarColour">
            <summary>
            Colour of the Bar
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.SoundEmitter">
            <summary>
            Models a SoundEmitter that plays sounds dynamic to a position
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.SoundEmitter.#ctor(GWNorthEngine.Audio.Params.SoundEmitterParams)">
            <summary>
            Creates a SoundEmitter object based on the params
            </summary>
            <param name="parms">SoundEmitterParams object</param>
        </member>
        <member name="M:GWNorthEngine.Audio.SoundEmitter.playSoundEffect(Microsoft.Xna.Framework.Audio.SoundEffect,Microsoft.Xna.Framework.Vector2,System.Single,System.Boolean)">
            <summary>
            Plays a sound effect in relation to a listening position
            </summary>
            <param name="sfx">SoundEffect to play</param>
            <param name="listenersPosition">Position the listener is currently at</param>
            <param name="pitch">Pitch of the sound effect</param>
            <param name="loop">Whether we are looping the sound effect or not</param>
        </member>
        <member name="M:GWNorthEngine.Audio.SoundEmitter.update(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Updates the emitter based on the listeners position
            </summary>
            <param name="listenersPosition"></param>
        </member>
        <member name="M:GWNorthEngine.Audio.SoundEmitter.update(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Updates the emitter based on the listeners positions
            </summary>
            <param name="listenersPositions">Vector2[] of the positions that we need to take into account for listening</param>
        </member>
        <member name="P:GWNorthEngine.Audio.SoundEmitter.Position">
            <summary>
            Position of the Sound Emitter
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.SoundEmitter.EmittRadius">
            <summary>
            Emission radius
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.PathNode">
            <summary>
            A* node of each moveable space
            </summary>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.PathNode.#ctor(GWNorthEngine.AI.AStar.PathNode,Microsoft.Xna.Framework.Point,System.Int32,System.Int32)">
            <summary>
            Construction of the PathNode object
            </summary>
            <param name="parent">Parent of the node</param>
            <param name="position">Position within the board of the node</param>
            <param name="startDistance">Distance from the start</param>
            <param name="endDistance">Distance from the end</param>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.PathNode.fScoresEqual(GWNorthEngine.AI.AStar.PathNode)">
            <summary>
            Determines if two Nodes have an equal F score and H score
            </summary>
            <param name="compareWith">Node to compare with this node</param>
            <returns>true if the nodes are equal, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.AI.AStar.PathNode.ToString">
            <summary>
            Tostring of the node
            </summary>
            <returns>String of the node object</returns>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.PathNode.H">
            <summary>
            Get or sets the H score of a node (Estimated cost to move to the destination point from the current position)
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.PathNode.G">
            <summary>
            Gets or sets the G score of a node (Cost to move from the starting point to the current position)
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.PathNode.FScore">
            <summary>
            Gets the total F score of a node
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.PathNode.Position">
            <summary>
            Gets or sets the nodes position within the board
            </summary>
        </member>
        <member name="P:GWNorthEngine.AI.AStar.PathNode.Parent">
            <summary>
            Gets or sets the nodes parent node
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.ScrollingBackGround2D">
            <summary>
            Class that handles a scrolling background
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.backGrounds">
            <summary>
            List of StaticDrawable2D objects used as the backgrounds
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.viewPort">
            <summary>
            Viewport which the background is rendered in
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.ScrollingBackGround2D.#ctor(GWNorthEngine.Model.Params.ScrollingBackGround2DParams)">
            <summary>
            Constructs the scrolling background
            </summary>
            <param name="parms">ScrollingBackGround2dParams object containing the data required to build the scrolling background</param>
        </member>
        <member name="M:GWNorthEngine.Model.ScrollingBackGround2D.update(System.Single)">
            <summary>
            Updates the scrolling background and handles the wrapping
            </summary>
            <param name="elapsed">Elapsed time since the last update call</param>
        </member>
        <member name="M:GWNorthEngine.Model.ScrollingBackGround2D.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the scrolling background
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:GWNorthEngine.Model.ScrollingBackGround2D.dispose">
            <summary>
            Disposes of the backgrounds used by the scene
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.ScrollingBackGround2D.Speed">
            <summary>
            Gets or sets the speed which the scene is scrolling at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.ScrollingBackGround2D.ScrollDirection">
            <summary>
            Gets or sets the direction the scene is scrolling in
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection">
            <summary>
            Directions the scene can scroll in
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection.None">
            <summary>
            Not scrolling
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection.Left">
            <summary>
            Scrolls to the left
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection.Right">
            <summary>
            Scrolls to the right
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection.Up">
            <summary>
            Scrolls upwards
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.ScrollingBackGround2D.ScrollingDirection.Down">
            <summary>
            Scrolls downwards
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleRowBasedOnTexture">
            <summary>
            Object used to load an Animated2DSprite object that is a single row in a sprite sheet and uses the textures width to determine franes
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleRow">
            <summary>
            Object used to load an Animated2DSprite object that is a single row in a sprite sheet
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams">
            <summary>
            Object containing the data required to build a sprite
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams">
            <summary>
            Object containing the required data for the basis to build any SpriteBatch drawable object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.#ctor">
            <summary>
            Defines a new Base2DSpriteDrawableParams object with the defaults set. The defaults are listed below;
            LightColour:	Colour.White
            Origin:			Vector2(0f,0f)
            Scale:			Vector2(1f,1f)
            Rotation:		0f
            Layer:			0f
            SpriteEffect:	None
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.Position">
            <summary>
            Gets or sets the starting position of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.Origin">
            <summary>
            Gets or sets the starting origin of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.Scale">
            <summary>
            Gets or Sets the startign scale of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.Rotation">
            <summary>
            Gets or sets the starting rotation of the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.Layer">
            <summary>
            Gets or sets the starting layer to render the sprite at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.LightColour">
            <summary>
            Gets or sets the starting colour in which to render the sprite in
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.SpriteEffect">
            <summary>
            Gets or sets the SpriteEffect technique used for rendering the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Base2DSpriteDrawableParams.RenderingRectangle">
            <summary>
            Gets or sets the Rectangle used to render portions of the Texture
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.framesStartWidth">
            <summary>
            Where to start in the sprites width for loading
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.framesStartHeight">
            <summary>
            Where to start in the sprites height for loading
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.spaceBetweenFrames">
            <summary>
            Space between the frames
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.maxColumnsToARow">
            <summary>
            Number of columns to load in a sheet before moving to the next line
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.#ctor">
            <summary>
            Defines a new SpriteParams object with the defaults set. The defaults are listed below;
            AnimationState: AnimationState.Paused
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.Texture">
            <summary>
            Gets or sets the texture for a sprite for externally loaded sprites
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.FramesWidth">
            <summary>
            Gets or sets the sprites width for the frame loading.
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.FramesHeight">
            <summary>
            Gets or sets the sprites height for the frame loading.
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams.AnimationParams">
            <summary>
            Gets or sets the BaseAnimationManagerParams object for the sprite
            </summary>
        </member>
        <member name="T:GWNorthEngine.Input.InputManager">
            <summary>
            Manager that handles the states of different input devices
            </summary>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.#ctor">
            <summary>
            Sets the default values of the input manager
            </summary>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.getInstance">
            <summary>
            Retrieves the singleton instance
            </summary>
            <returns>InputManager</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.update(System.Boolean)">
            <summary>
            Main loop that updates all of the devices
            <param name="isWindowActive">States whether the window is active or not</param>
            </summary>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasKeyPressed(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key was just pressed down
            </summary>
            <param name="key">Key that we are checking for</param>
            <returns>True if the key was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasKeyReleased(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key was just released
            </summary>
            <param name="key">Key that we are checking for</param>
            <returns>True if the key was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isKeyDown(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if a key is held down
            </summary>
            <param name="key">Key that we are checking for</param>
            <returns>True if the key is held, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasButtonPressed(GWNorthEngine.Input.MouseButton)">
            <summary>
            Determines if a button was just pressed down
            </summary>
            <param name="button">Button that we are checking for</param>
            <returns>True if the button was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasButtonReleased(GWNorthEngine.Input.MouseButton)">
            <summary>
            Determines if a button was just released
            </summary>
            <param name="button">Button that we are checking for</param>
            <returns>True if the button was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isButtonDown(GWNorthEngine.Input.MouseButton)">
            <summary>
            Determines if a button is held down
            </summary>
            <param name="button">Button that we are checking for</param>
            <returns>True if the button is held down, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasLeftButtonPressed">
            <summary>
            Determines if the left mouse button was just pressed down
            </summary>
            <returns>True if the button was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasLeftButtonReleased">
            <summary>
            Determines if the left mouse button was just released
            </summary>
            <returns>True if the button was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isLeftButtonDown">
            <summary>
            Determines if the left mouse button is held down
            </summary>
            <returns>True if the button is held down, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasRightButtonPressed">
            <summary>
            Determines if the right mouse button was just pressed down
            </summary>
            <returns>True if the button was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasRightButtonReleased">
            <summary>
            Determines if the left mouse button was just released
            </summary>
            <returns>True if the button was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isRightButtonDown">
            <summary>
            Determines if the right mouse button is held down
            </summary>
            <returns>True if the button is held down, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasMiddleButtonPressed">
            <summary>
            Determines if the middle mouse button was just pressed down
            </summary>
            <returns>True if the button was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasMiddleButtonReleased">
            <summary>
            Determines if the left mouse button was just released
            </summary>
            <returns>True if the button was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isMiddleButtonDown">
            <summary>
            Determines if the middle mouse button is held down
            </summary>
            <returns>True if the button is held down, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.updateMousePosition(System.Int32,System.Int32)">
            <summary>
            Adds the passed in x value to the Mouse.X and subtracts the y value from the Mouse.Y
            </summary>
            <param name="x">Value to add in the x direction</param>
            <param name="y">Value to subtract in the y direction</param>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasButtonPressed(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Determines if a specific player just pressed a buton
            </summary>
            <param name="playerIndex">Player we are checking</param>
            <param name="button">Button that we are checking</param>
            <returns>True if the player's button was just pressed, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.wasButtonReleased(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Determines if a specific player's buton was just released
            </summary>
            <param name="playerIndex">Player we are checking</param>
            <param name="button">Button that we are checking</param>
            <returns>True if the player's button was just released, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isButtonDown(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>
            Determines if a specific player is holding a button down
            </summary>
            <param name="playerIndex">Player we are checking</param>
            <param name="button">Button that we are checking</param>
            <returns>True if the player's button is held down, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isStickMoved(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if a specific players stick is moved
            </summary>
            <param name="stick">Stick value to check</param>
            <returns>True if the stick is moved, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isLeftStickMoved(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Determines if a specific players left stick is moved
            </summary>
            <param name="playerIndex">Player we are checking</param>
            <param name="value">How much the stick is moved by</param>
            <returns>True if the stick is moved, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Input.InputManager.isRightStickMoved(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Determines if a specific players right stick is moved
            </summary>
            <param name="playerIndex">Player we are checking</param>
            <param name="value">How much the stick is moved by</param>
            <returns>True if the stick is moved, otherwise false</returns>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.MouseX">
            <summary>
            Returns the mouses X position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.PreviousMouseX">
            <summary>
            Returns the mouses previous X position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.MouseY">
            <summary>
            Returns the mouses Y position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.PreviousMouseY">
            <summary>
            Returns the mouses previous Y position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.MousePosition">
            <summary>
            Returns a Vector2 of the mouses position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Input.InputManager.PreviousMousePosition">
            <summary>
            Returns a Vector2 of the mouses previous position
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Camera3D">
            <summary>
            Models the data required for a camera to be used in 3D space
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera3D.#ctor(GWNorthEngine.Logic.Params.Camera3DParams)">
            <summary>
            Creates a Camera based on the data parameter object
            </summary>
            <param name="parms">CameraParams object</param>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera3D.updateViewMatrix">
            <summary>
            Updates the view matrix based on the cameras current position, target and up vector
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera3D.updateRotationMatrix">
            <summary>
            Updates the rotation matrix and applies it to the cameras position, target and up vector (Yaw, Pitch and Roll)
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Camera3D.update">
            <summary>
            Updates the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.Position">
            <summary>
            Gets or Sets the position of the Camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.Target">
            <summary>
            Gets or sets the cameras target or look at position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.Up">
            <summary>
            Gets or sets the Up vector of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.Rotation">
            <summary>
            Gets or sets the rotation of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.ViewMatrix">
            <summary>
            Gets or sets the view matrix of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Camera3D.ProjectionMatrix">
            <summary>
            Gets or sets the projection matrix of the camera
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.SwayEffect">
            <summary>
            Models the data required for a Sway effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.SwayEffect.#ctor(GWNorthEngine.Model.Effects.Params.SwayEffectParms)">
            <summary>
            Constructs a SwayEffect
            </summary>
            <param name="parms">SwayEffectParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.SwayEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.SwayEffect.SwayBy">
            <summary>
            Amount to sway by
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.SwayEffect.SwayUpTo">
            <summary>
            Amount to sway up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.SwayEffect.SwayDownTo">
            <summary>
            Amount to sway down to
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.PickingUtils">
            <summary>
            Class containg usefull methods for picking different types of objects
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.PickingUtils.pickRectangle(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Picks a rectangle based on its coordinates vs the actors position
            </summary>
            <param name="actorsPosition">Actors position. Could be mouse position, XBox controllers stick position etc</param>
            <param name="buttonsRectangle">rectangle to check for collision</param>
            <returns></returns>
        </member>
        <member name="M:GWNorthEngine.Utils.PickingUtils.pickVector(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Determines if a Vector2 is within a BoundingBox
            </summary>
            <param name="actorsPosition">Vector2 that we want to check</param>
            <param name="bbox">BoundingBox that we are interogating</param>
            <returns>true if the Vector2 is within the BoundingBox, otherwise false</returns>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.MapTile">
            <summary>
            Models the basic data of a TilePlacer tile
            </summary>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapTile.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Basic construction of the MapTile
            </summary>
            <param name="index">Index the tile resides at in the array</param>
            <param name="texture">Texture the tile is rendered with</param>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapTile.#ctor(Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Graphics.Texture2D,GWNorthEngine.Tools.TilePlacer.TileValues,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Construction of the MapTile
            </summary>
            <param name="index">Index the tile resides at in the array</param>
            <param name="texture">Texture the tile is rendered with</param>
            <param name="tileValue">Type of the tile</param>
            <param name="scale">Scale of the tiles</param>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapTile.dispose">
            <summary>
            Disposes the texture that is used to represent the tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.MapTile.Index">
            <summary>
            Gets or sets Index in the array that this tile resides at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.MapTile.WorldPosition">
            <summary>
            Gets or sets the world position of the tile
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.MapTile.Texture">
            <summary>
            Gets or sets the Texture the tile uses
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.MapTile.TileValue">
            <summary>
            Gets or sets the TileValue of the tile which defines which type of tile it is
            </summary>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.LoadResult">
            <summary>
            Models the data that is a direct result from loading a TilePlacer map
            </summary>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.LoadResult.#ctor(System.Int32,System.Int32,GWNorthEngine.Tools.TilePlacer.Layer[])">
            <summary>
            Constructs a LoadResult object
            </summary>
            <param name="height">Height of the map</param>
            <param name="width">Width of the map</param>
            <param name="layers">Layers of MapTile objects that make the map</param>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.LoadResult.Height">
            <summary>
            Gets or sets the height of the map
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.LoadResult.Width">
            <summary>
            Gets or sets the width of the map
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.LoadResult.Layers">
            <summary>
            Gets or sets the Layers of the map
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.TexturedButtonParams">
            <summary>
            Params object containing the data required to build a TexturedButton object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.StaticDrawable2DParams">
            <summary>
            Models the data required to draw a static texture to the screen
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.StaticDrawable2DParams.Texture">
            <summary>
            Gets or sets the texture to be drawn to the screen
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Params.TexturedButtonParams.#ctor">
            <summary>
            Initializes a button with the default values set below
            
            LightColour:		Color.White;
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedButtonParams.RegularTexture">
            <summary>
            Gets or sets the regular texture for the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedButtonParams.MouseOverTexture">
            <summary>
            Gets or sets the buttons mouse over texture
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedButtonParams.ID">
            <summary>
            Buttons ID used for determining if a button was clicked
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Animated2DSprite">
            <summary>
            Sprite class that can be either animated or not
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Animated2DSprite.texture">
            <summary>
            Texture used to render the sprite
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Animated2DSprite.animationManager">
            <summary>
            Aninmation manager for the sprite
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Animated2DSprite.frames">
            <summary>
            All the frames from the sprite sheet for the sprite
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.#ctor(GWNorthEngine.Model.Params.BaseAnimated2DSpriteParams)">
            <summary>
            Builds a sprite based off of the parms specified
            </summary>
            <param name="parms">SpriteParams object containing all of the data to how this sprite is loaded, its position, colour, etc,etc</param>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.initSprite(Microsoft.Xna.Framework.Graphics.Texture2D,GWNorthEngine.Logic.Params.BaseAnimationManagerParams,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Actual building of the sprite
            </summary>
            <param name="texture">Texture2D use to render the sprite</param>
            <param name="framesStartWidth">Starting x point of the sprite in the sprite sheet</param>
            <param name="framesStartHeight">Starting y point of the sprite in the sprite sheet</param>
            <param name="frameWidth">X size of a sprites single frame</param>
            <param name="frameHeight">Y size of a sprites single frame</param>
            <param name="spaceBetweenFrames">Space between the frames in the sprite sheet</param>
            <param name="animationParams">BaseAnimationManagerParams object containing the animation information for the sprite</param>
            <param name="maxColumnsToARow">Maximum columns to a row in the sprite sheet</param>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.reset(System.Boolean)">
            <summary>
            Resets the sprite with the option to make the animation sequence fire as soon as a "Play" state is entered
            </summary>
            <param name="cockAnimation">Option to make an animation fire as soon as a "Play" state is entered</param>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.update(System.Single)">
            <summary>
            Updates the sprite, by default only the animation
            </summary>
            <param name="elapsed"></param>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Renders the sprite to the screen
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Model.Animated2DSprite.dispose">
            <summary>
            Releases the portions of the sprite that cause memory leaks
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Animated2DSprite.AnimationManager">
            <summary>
            Gets or sets the animation manager for the sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Animated2DSprite.Texture">
            <summary>
            Gets or sets the texture of an animated sprite
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Animated2DSprite.Frames">
            <summary>
            Gets or sets the animation frames
            </summary>
        </member>
        <member name="T:GWNorthEngine.Engine.RunningMode">
            <summary>
            Enum used to tell the Engine DLL what mode the front end application is running in
            </summary>
        </member>
        <member name="F:GWNorthEngine.Engine.RunningMode.Release">
            <summary>
            Front end application is in release mode
            </summary>
        </member>
        <member name="F:GWNorthEngine.Engine.RunningMode.Debug">
            <summary>
            Front end application is in debug mode
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.Params.CheckBoxParams">
            <summary>
            Models the data required to build a CheckBox
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.CheckBoxParams.Text">
            <summary>
            Text to appear next to the CheckBox
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.CheckBoxParams.Font">
            <summary>
            Font to write the text in
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.CheckBoxParams.Checked">
            <summary>
            Whether or not the initial state of the CheckBox is checked or unchecked
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.Params.SFXEngineParams">
            <summary>
            Object containing the required data to build a SFXEngine instance
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.Params.BaseSoundEngineParams">
            <summary>
            Object containing the data required to build the BaseSoundEngine
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.Params.BaseSoundEngineParams.#ctor">
            <summary>
            Builds the default settings for setting up a BaseSoundEngine. The default settings are listed below
            Volume:		100%(1f)
            Muted:	false
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.BaseSoundEngineParams.Volume">
            <summary>
            Gets or sets the volume to play sound effects at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.BaseSoundEngineParams.Muted">
            <summary>
            Gets or sets whether audio is to be played
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.Params.SFXEngineParams.#ctor">
            <summary>
            Builds the default settings for setting up a SFXEngine. The default settings are listed below.
            Pan:		0f(Centered)
            Pitch:		0f(Unity)
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SFXEngineParams.Pan">
            <summary>
            Gets or sets the panning of the sound effects
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.SFXEngineParams.Pitch">
            <summary>
            Gets or sets the pitch of the sound effects
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.TextureUtils">
            <summary>
            Utility class to perform operations on texures or involving textures
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.TextureUtils.create2DColouredTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a 2D coloured texture
            </summary>
            <param name="device">GraphicsDevice object</param>
            <param name="width">Width of the texture</param>
            <param name="height">Height of the texture</param>
            <param name="colour">Colour of the texture</param>
            <returns>Newly created Texture2D object</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.TextureUtils.create2DRingTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,Microsoft.Xna.Framework.Color)">
            <summary>
            Creates a 2D coloured ring texture
            </summary>
            <param name="device">GraphicsDevice object</param>
            <param name="radius">Radius of the circle</param>
            /// <param name="colour">Colour of the texture</param>
            <returns>Newly created Texture2D object</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.TextureUtils.getColourData(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Retrieves the texures colour information
            </summary>
            <param name="texture">Texture to retrieve the colour array from</param>
            <returns>Colour[] of the texture</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.TextureUtils.getColourData2D(Microsoft.Xna.Framework.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Retrieves the Texture's colour data in a 2D array
            </summary>
            <remarks>The texture data is in x,y format not y,x format at this time</remarks>
            <param name="texture">Texture that we want to analyze</param>
            <param name="startX">Optional parameter of where to start on the X axis in the texture</param>
            <param name="startY">Optional parameter of where to start on the Y axis in the texture</param>
            <param name="width">Optional parameter of where to stop analyzing on the X axis</param>
            <param name="height">Optional parameter of where to stop analyzing on the Y axis</param>
            <returns>Color[,] of the texture</returns>
        </member>
        <member name="T:GWNorthEngine.Utils.DebugUtils">
            <summary>
            Helpful methods for debugging
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.#ctor">
            <summary>
            Builds a debug utils object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Builds a debug utils object for outlining objects
            </summary>
            <param name="lineTexture">Line texture used to draw lines around objects such as bounding boxes</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a bounding box using Line2D's
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the bounding box</param>
            <param name="boundingBox">BoundingBox object to draw</param>
            <param name="debugColour">Colour to draw the box in</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a bounding box using Line2D's
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the bounding box</param>
            <param name="boundingBox">BoundingBox object to draw</param>
            <param name="debugColour">Colour to draw the box in</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a bounding box using Line2D's
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the bounding box</param>
            <param name="boundingBox">BoundingBox object to draw</param>
            <param name="debugColour">Colour to draw the box in</param>
            <param name="lineTexture">Texture2D used for drawing the bounding box</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingBox(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a bounding box using Line2D's
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the bounding box</param>
            <param name="boundingBox">BoundingBox object to draw</param>
            <param name="debugColour">Colour to draw the box in</param>
            <param name="lineTexture">Texture2D used for drawing the bounding box</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingSphere(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a bounding sphere
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the sphere</param>
            <param name="boundingSphere">BoundingSPhere object to draw</param>
            <param name="debugColour">Colour to draw the sphere in</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawBoundingSphere(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a bounding sphere
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the sphere</param>
            <param name="boundingSphere">BoundingSPhere object to draw</param>
            <param name="debugColour">Colour to draw the sphere in</param>
            <param name="lineTexture">Texture2D used for drawing the bounding sphere</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawRectangle(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a rectangle using Line2D's
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the bounding box</param>
            <param name="rectangle">Rectable object to draw</param>
            <param name="debugColour">Colour to draw the rectangle in</param>
            <param name="lineTexture">Texture2D used for drawing the rectangle</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawVector3s(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Draws a set of vector 3s
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the vectors</param>
            <param name="max">Max position to draw</param>
            <param name="min">Min position to draw</param>
            <param name="debugColour">Colour to draw the Vectors in</param>
            <param name="lineTexture">Texture2D used for drawing the vectors</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawVector3s(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Draws a set of vector 3s
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw the vectors</param>
            <param name="max">Max position to draw</param>
            <param name="min">Min position to draw</param>
            <param name="debugColour">Colour to draw the Vectors in</param>
            <param name="lineTexture">Texture2D used for drawing the vectors</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Utils.DebugUtils.drawRadius(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Color)">
            <summary>
            Draws a radius using a SpriteDrawable2D
            </summary>
            <param name="spriteBatch">SpriteBatch object used to draw</param>
            <param name="position">Position to draw the radius around</param>
            <param name="debugColour">Colour to draw the rectangle in</param>
            <param name="radiusSpecificTexture">Texture2D used for drawing the radius</param>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.SwayEffectParms">
            <summary>
            Models the data required for a Sway effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.SwayEffectParms.SwayBy">
            <summary>
            Amount to sway by
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.SwayEffectParms.SwayUpTo">
            <summary>
            Amount to sway up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.SwayEffectParms.SwayDownTo">
            <summary>
            Amount to sway down to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.SwayEffectParms.Direction">
            <summary>
            Direction we want to start the effect in
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Text2D">
            <summary>
            Text class for writing text to the screen
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Text2D.font">
            <summary>
            SpriteFont object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Text2D.writtenText">
            <summary>
            Text written to the screen
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Text2D.#ctor(GWNorthEngine.Model.Params.Text2DParams)">
            <summary>
            Builds an object that can write text to the screen
            </summary>
            <param name="parms">TextParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Text2D.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Renders the sprite to the screen
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="P:GWNorthEngine.Model.Text2D.WrittenText">
            <summary>
            Gets or sets text to be written to the screen
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Animated2DSpriteLoadMultipleRows">
            <summary>
            Object used to load an Animated2DSprite object that is a multiple rows in a sprite sheet
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Animated2DSpriteLoadMultipleRows.MaxColumnsToARow">
            <summary>
            Gets or sets the number of columns to load in a sprite sheet before moving to the next line
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.TexturedEffectButton">
            <summary>
            Textured effect button
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.StaticDrawable2D">
            <summary>
            Text class for writing text to the screen
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.StaticDrawable2D.texture">
            <summary>
            Texture2D object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.StaticDrawable2D.#ctor(GWNorthEngine.Model.Params.StaticDrawable2DParams)">
            <summary>
            Builds an object that can draw a texture to the screen
            </summary>
            <param name="parms">StaticDrawable2DParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.StaticDrawable2D.render(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Renders the sprite to the screen
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
            <param name="positionOffset">Offset to render the object at</param>
        </member>
        <member name="M:GWNorthEngine.Model.StaticDrawable2D.dispose">
            <summary>
            Disposes the texture that was being drawn
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.StaticDrawable2D.Texture">
            <summary>
            Gets or sets the Texture of the static drawable object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.IButton">
            <summary>
             Button interface defining what every button must implement
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.IButton.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            abstract rendering of the base button
            </summary>
            <param name="spriteBatch">SpriteBatch object used to render the sprite</param>
        </member>
        <member name="M:GWNorthEngine.Model.IButton.processActorsMovement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Processes the actors movment
            </summary>
            <param name="actorsPosition">Actors current position</param>
        </member>
        <member name="M:GWNorthEngine.Model.IButton.isActorOver(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if the actor is over the button
            </summary>
            <param name="actorsPosition">Actors current position</param>
            <returns>boolean based on whether the actor is over the button</returns>
        </member>
        <member name="M:GWNorthEngine.Model.IButton.dispose">
            <summary>
            Releases the portions of the button that cause memory leaks
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.IButton.ID">
            <summary>
            Gets or sets the ID of the button
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedEffectButton.#ctor(GWNorthEngine.Model.Params.TexturedEffectButtonParams)">
            <summary>
            Building of a textured button
            </summary>
            <param name="parms">TexturedButtonParams object containing the data required to build the TexturedButton</param>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedEffectButton.isActorOver(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if the actor is over the button
            </summary>
            <param name="actorsPosition">Actors current position</param>
            <returns>boolean based on whether the actor is over the button</returns>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedEffectButton.processActorsMovement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Processes the movement of the actor (Mouse/XBox Controller etc)
            </summary>
            <param name="actorsPosition">Actors current position</param>
        </member>
        <member name="P:GWNorthEngine.Model.TexturedEffectButton.ID">
            <summary>
            Gets or sets the ID of the button
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.Params.SoundEngineSliderParams">
            <summary>
            Models the data required to build a SoundEngine specific slider
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SoundEngineSliderParams.SoundEngine">
            <summary>
            BaseSoundEngine that the slider is to control
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SoundEngineSliderParams.CheckBoxText">
            <summary>
            Text to display beside the CheckBox
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SoundEngineSliderParams.Checked">
            <summary>
            Whether the check box is checked or unchecked
            </summary>
        </member>
        <member name="P:GWNorthEngine.GUI.Params.SoundEngineSliderParams.CheckBoxPosition">
            <summary>
            Position of the CheckBox
            </summary>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.Constants">
            <summary>
            Contains common constants for the TilePlacer tool
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.FILE_EXTENSION">
            <summary>
            File extension used by files for or created by the TilePlacer
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_HEADER_SIZE">
            <summary>
            Header that denotes the start of the map size section
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_HEIGHT">
            <summary>
            Height of the map
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_WIDTH">
            <summary>
            Width of the map
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_TILE_SIZE">
            <summary>
            Size of the tiles on the layer
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_HEADER_LAYER">
            <summary>
            Header that denotes the start of a layer
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_HEADER_TILE">
            <summary>
            Header that denotes the start of a tile
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_TILE_INDEX">
            <summary>
            Index of the tile
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_TILE_FILE_NAME">
            <summary>
            Filename of the tile
            </summary>
        </member>
        <member name="F:GWNorthEngine.Tools.TilePlacer.Constants.XML_TILE_VALUE">
            <summary>
            Value of the tile (TileValues int representation)
            </summary>
        </member>
        <member name="T:GWNorthEngine.Scripting.Model.RegisteredObject">
            <summary>
            Models the data required to use an object via scripting
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.#ctor(System.Object@,System.String,System.Reflection.MethodInfo[],System.Reflection.PropertyInfo[])">
            <summary>
            Builds a new RegisteredObject
            </summary>
            <param name="reference">Object reference</param>
            <param name="referenceName">Reference name to access the object</param>
            <param name="methods">MethodInfo object array of methods you want accessible to the script, by default it is everything</param>
            <param name="properties">PropertyInfo object array of properties you want accessible to the script, by default it is everything</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.runMethod(System.String)">
            <summary>
            Runs a specific method, parses the input for its parameter etc
            </summary>
            <param name="input">Input to execute</param>
            <returns>True if a method was found to execute, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.runProperty(System.String,System.Object@)">
            <summary>
            Runs a property based on the input, parses the parameters etc
            </summary>
            <param name="input">Input to execute</param>
            <param name="result">outputs the return object of a getter</param>
            <returns>True if a property was found, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.runProperty(System.Reflection.MethodInfo[],System.Object[])">
            <summary>
            Executes a specific properties methods
            </summary>
            <param name="methods">Methods avaialble</param>
            <param name="values">values to assign the property if we are doing a set</param>
            <returns>Get object if that is the property we are executing</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.getCommand(System.String)">
            <summary>
            Retrieves a command based on the input
            </summary>
            <param name="input">Input to parse</param>
            <returns>Command retrieved from the parsed input</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.getParameters(System.Reflection.MethodInfo,System.String)">
            <summary>
            Retrieves the object parameters for a method
            </summary>
            <param name="method">Method we are retrieving the parameters for</param>
            <param name="input">Console input to parse</param>
            <returns>object[] of the parameters</returns>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.listMethods">
            <summary>
            Lists the script accessible methods
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.listProperties">
            <summary>
            Lists the script accessible properties
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.help">
            <summary>
            Displays help information for the registered object such as script accessible methods and properties
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.RegisteredObject.runCommand(System.String)">
            <summary>
            Runs a command against the registered object
            </summary>
            <param name="command">Command to execute</param>
            <returns>Object based on a properties return type</returns>
        </member>
        <member name="P:GWNorthEngine.Scripting.Model.RegisteredObject.ReferenceName">
            <summary>
            Gets the reference name of the registered object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Scripting.Model.RegisteredObject.Reference">
            <summary>
            Gets the actual reference object of the registered object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.ColorLerpEffect">
            <summary>
            Models the data required for a Color lerping effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.ColorLerpEffect.#ctor(GWNorthEngine.Model.Effects.Params.ColourLerpEffectParams)">
            <summary>
            Constructs a PulseEffect object
            </summary>
            <param name="parms">ColourLerpEffectParms object used to build the effect</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.ColorLerpEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.ColorLerpEffect.LerpUpTo">
            <summary>
            Color to lerp down to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.ColorLerpEffect.LerpDownTo">
            <summary>
            Color to lerp up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.ColorLerpEffect.LerpBy">
            <summary>
            Amount to lerp by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Line2DParams">
            <summary>
            Object containing the data required to build a 2D line
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Line2DParams.StartPosition">
            <summary>
            Gets or sets the starting position of the line
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Line2DParams.EndPosition">
            <summary>
            Gets or sets the ending position of the line
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Line2DParams.Texture">
            <summary>
            Gets or sets the texture for the line
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.AutoParticle2DEmitter">
            <summary>
            Models the basis of an automatic particle emitter
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.BaseParticle2DEmitter">
            <summary>
            Models the basis of every particle emitter
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.elapsedSpawnTime">
            <summary>
            Elapsed time since the last particle was spawned
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.spawnDelay">
            <summary>
            Spawn delay to create new particles
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.particleTexture">
            <summary>
            Texture the particles are using
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.particleParams">
            <summary>
            Basic params object used to create the particle
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.particles">
            <summary>
            List of emitted particles
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseParticle2DEmitter.RANDOM">
            <summary>
            Random number generator
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2DEmitter.#ctor(GWNorthEngine.Model.Params.BaseParticle2DEmitterParams)">
            <summary>
            Builds the base particle emitter
            </summary>
            <param name="parms">BaseParticle2DEmitterParams object containing the data required to build the particle emitter</param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2DEmitter.createParticle">
            <summary>
            Default implementation of creating a particle...default implementation is setting the elapsedSpawnTime back to 0f;
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2DEmitter.update(System.Single)">
            <summary>
            Updates the particle emitter and its particles. Also handles the removal of old particles
            </summary>
            <param name="elapsed"></param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2DEmitter.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the emitters active particles
            </summary>
            <param name="spriteBatch"></param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseParticle2DEmitter.dispose">
            <summary>
            Disposes of the emitters texture used to generate the particles
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseParticle2DEmitter.Particles">
            <summary>
            Gets or sets the emitters particle list
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.AutoParticle2DEmitter.#ctor(GWNorthEngine.Model.Params.BaseParticle2DEmitterParams)">
            <summary>
            Builds the auto particle emitter
            </summary>
            <param name="parms">BaseParticle2DEmitterParams object containing the data required to build the particle emitter</param>
        </member>
        <member name="M:GWNorthEngine.Model.AutoParticle2DEmitter.update(System.Single)">
            <summary>
            Updates the particle emitter and its particles, and creates new particles, also handles the removal of old particles
            </summary>
            <param name="elapsed"></param>
        </member>
        <member name="T:GWNorthEngine.Model.ColouredButton">
            <summary>
            Coloured button
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.#ctor(GWNorthEngine.Model.Params.ColouredButtonParams)">
            <summary>
            Building of a coloured button
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.isActorOver(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if the actor is over the button
            </summary>
            <param name="actorsPosition">Actors current position</param>
            <returns>boolean based on whether the actor is over the button</returns>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.processActorsMovement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Processes the movement of the actor (Mouse/XBox Controller etc)
            </summary>
            <param name="actorsPosition">Actors current position</param>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.updateColours(Microsoft.Xna.Framework.Color)">
            <summary>
            Updates both the Line and text's colour to the colour passed in
            </summary>
            <param name="newColour">Colour to assign to the Text2D and Lin2D objects</param>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Rendering of the button
            </summary>
            <param name="spriteBatch">SpriteBatch object to render the button</param>
        </member>
        <member name="M:GWNorthEngine.Model.ColouredButton.dispose">
            <summary>
            Releases the portions of the button that cause memory leaks
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.ColouredButton.Text">
            <summary>
            Gets or sets the Text2D object used by the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.ColouredButton.Lines">
            <summary>
            Gets or sets the Line2D object used by the button
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.ColouredButton.ID">
            <summary>
            Gets or sets the ID of the button
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.DefaultCamera3DParams">
            <summary>
            Object containing the data required to build a default camera
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.Camera3DParams">
            <summary>
            Object containing the data required to build a camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.Position">
            <summary>
            Gets or Sets the position of the Camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.Target">
            <summary>
            Gets or sets the cameras target or look at position
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.Up">
            <summary>
            Gets or sets the Up vector of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.Rotation">
            <summary>
            Gets or sets the rotation of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.ViewMatrix">
            <summary>
            Gets or sets the view matrix of the camera
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.Camera3DParams.ProjectionMatrix">
            <summary>
            Gets or sets the projection matrix of the camera
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Params.DefaultCamera3DParams.#ctor">
            <summary>
            Constructs a default camera setup with the following values
            Position:			Vector3(0f,0f,50f)
            Target:				Vector3.Zero
            UpVector:			Vector3.Up
            ViewMatrix:			Matrix.Identity
            ProjectionMatrix:	Matrix.createPerspectiveFOV(45f, 16:9, .5f, 5000f)
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.ClampableCamera2D">
            <summary>
            Models the data required for a clampable(confined to a certain space) camera to be used in 2D space
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.ClampableCamera2D.#ctor(GWNorthEngine.Logic.Params.ClampableCamera2DParams)">
            <summary>
            Builds a ClampableCamera2D object based on the ClampableCamera2DParams object passed in
            </summary>
            <param name="parms">ClampableCamera2DParams object containing the data required to build the camera</param>
        </member>
        <member name="M:GWNorthEngine.Logic.ClampableCamera2D.update(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,System.Single)">
            <summary>
            Updates the cameras position based on the amount passed in but taking into account the cameras clamping restrictions
            </summary>
            <param name="moveBy">Amount to move the camera by</param>
            <param name="fromPosition">Position the clamping is to be based on</param>
            <param name="divisionFactor">Amount the position should be divided by to account for clamping</param>
        </member>
        <member name="T:GWNorthEngine.GUI.Constants">
            <summary>
            Constants file for GUI elements
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.GUI_FILE_NAME">
            <summary>
            Texture name that the GUI elements can be found in
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.SPACE_BETWEEN">
            <summary>
            Space between GUI elements in the texture
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.CHK_BOX_UNCHECKED">
            <summary>
            Location of the Unchecked check box
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.CHK_BOX_CHECKED">
            <summary>
            Location of the Checked check box
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.SLIDER_BALL">
            <summary>
            Location of the Slider's Ball
            </summary>
        </member>
        <member name="F:GWNorthEngine.GUI.Constants.SLIDER_BAR">
            <summary>
            Location of the Slider's Bar
            </summary>
        </member>
        <member name="T:GWNorthEngine.Audio.MusicEngine">
            <summary>
            Music engine, handles playing a play list
            </summary>
        </member>
        <member name="F:GWNorthEngine.Audio.MusicEngine.internalTrackNumber">
            <summary>
            This should only be used within the music engine and NEVER for an update, use the TrackNumber property for updates
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.#ctor(GWNorthEngine.Audio.Params.MusicEngineParams)">
            <summary>
            Builds a MusicEngine based on the data passed in via the parameter object
            </summary>
            <param name="parms">MusicEngineParams object containing the required data</param>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.add(Microsoft.Xna.Framework.Media.Song)">
            <summary>
            Adds a Song object to the play list
            </summary>
            <param name="song">Song object to add</param>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.add(System.Collections.Generic.List{Microsoft.Xna.Framework.Media.Song})">
            <summary>
            Adds a list of Song objects to the play list
            </summary>
            <param name="playList"></param>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.playNextTrack">
            <summary>
            Plays the next track in the play list
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.playPreviousTrack">
            <summary>
            Plays the previous track in the play list
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.play">
            <summary>
            Plays whichever track is up
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.stop">
            <summary>
            Stops the current track
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.pause">
            <summary>
            Pauses the current track
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.unpause">
            <summary>
            Unpauses the current track
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.MusicEngine.update">
            <summary>
            Progresses the sound track alongs its path at the end of a sound
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.MusicEngine.TrackNumber">
            <summary>
            Gets the track number we are sitting at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.MusicEngine.currentTrack">
            <summary>
            Gets the current track that is playing
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.MusicEngine.Muted">
            <summary>
            Gets or sets whether the engine is muted
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.MusicEngine.Volume">
            <summary>
            Gets or sets the volume of the engine
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.BaseAnimationManagerParams">
            <summary>
            Object containing the required data to build the AnimationManager object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.Params.BaseAnimationManagerParams.#ctor">
            <summary>
            Builds the default settings for setting up the AnimationManager object. The default settings are below;
            AnimationState:		Paused
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.BaseAnimationManagerParams.FrameRate">
            <summary>
            Gets or sets the rate in which the object animates at
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.BaseAnimationManagerParams.TotalFrameCount">
            <summary>
            Gets or sets the total animation frame count
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.BaseAnimationManagerParams.AnimationState">
            <summary>
            Gets or sets the AnimationState of the object
            </summary>
        </member>
        <member name="T:GWNorthEngine.AI.AStar.Params.DefaultPathfinderParams">
            <summary>
            Contains data required to build a A* PathFinder
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.CollisionUtils">
            <summary>
            Helper methods for determining collision between objects
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.CollisionUtils.doPixelsIntersect(Microsoft.Xna.Framework.Color[0:,0:],Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Color[0:,0:],Microsoft.Xna.Framework.Matrix)">
            <summary>
            Determines if two textures pixels intersect
            </summary>
            <param name="texture1Data">Texture1's colour data</param>
            <param name="texture1Matrix">The matrix used to render Texture1</param>
            <param name="texture2Data">Texture2's colour data</param>
            <param name="texture2Matrix">The matrix used to render Texture2</param>
            <returns>True if a collision was detected, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.CollisionUtils.doPixelsIntersect(Microsoft.Xna.Framework.Color[0:,0:],Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Color[0:,0:],Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector2@)">
            <summary>
            Determines if two textures pixels intersect and at which point
            </summary>
            <remarks>The collision is based on data in x,y format not y,x format at this time</remarks>
            <param name="texture1Data">Texture1's colour data</param>
            <param name="texture1Matrix">The matrix used to render Texture1</param>
            <param name="texture2Data">Texture2's colour data</param>
            <param name="texture2Matrix">The matrix used to render Texture2</param>
            <param name="collisionPoint">Out the Vector2 in which a collision occurred if at all</param>
            <returns>True if a collision was detected, otherwise false</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.CollisionUtils.doesBBoxCollideWithAnotherBBox(System.Collections.Generic.List{Microsoft.Xna.Framework.BoundingBox},Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Determinse if a bounding box collides with any number of bounding boxes in a list
            </summary>
            <param name="bboxes">List of bounding boxes to check a collision for</param>
            <param name="checkWith">Single bounding box to check against</param>
            <returns>True if a collision was found, otherwise false</returns>
        </member>
        <member name="T:GWNorthEngine.Logic.AnimationManager">
            <summary>
            Animation manager class which handles the animation steps for anything animated
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationManager.animationState">
            <summary>
            Animation state for the animation sequence
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationManager.frameRate">
            <summary>
            Frame rate at which the object is animated
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationManager.totalElapsed">
            <summary>
            Time elapsed sense we last animated the object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Logic.AnimationManager.currentFrame">
            <summary>
            Current frame we are at in the animation line
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.AnimationManager.#ctor(GWNorthEngine.Logic.Params.BaseAnimationManagerParams)">
            <summary>
            Builds an AnimationManager based on the AnimationManagerParams object passed in
            </summary>
            <param name="parms">BaseAnimationManagerParams object containing the data required to load the Animation Manager object</param>
        </member>
        <member name="M:GWNorthEngine.Logic.AnimationManager.setNextFrame(System.Int32)">
            <summary>
            Handles incrementing the animation steps
            </summary>
            <param name="maxFrameCount">Max frames used to reset reverse sprites</param>
        </member>
        <member name="M:GWNorthEngine.Logic.AnimationManager.step(System.Int32)">
            <summary>
            Steps the animation frame ignoring timing
            </summary>
            <param name="maxFrameCount">Max frames used to reset reverse sprites</param>
        </member>
        <member name="M:GWNorthEngine.Logic.AnimationManager.resetAnimation(System.Int32,System.Boolean)">
            <summary>
            Resets the animation sequence that the AnimationManager is controlling and has an option to set the animation so that it will
            fire as soon the state is changed to a "play" state
            </summary>
            <param name="maxFrameCount">Max frames used to reset reverse sprites</param>
            <param name="cockAnimation">Determines if we are setting the animation up to fire right away as soon as a "Play" state is entered or whether
            we want it set to replay the whole wait time</param>
        </member>
        <member name="M:GWNorthEngine.Logic.AnimationManager.update(System.Single,System.Int32)">
            <summary>
            Handles whether it is time to update the animation step or not
            </summary>
            <param name="elapsed">Time elapsed sense the last call</param>
            <param name="maxFrameCount">Maximum frames of the object</param>
        </member>
        <member name="P:GWNorthEngine.Logic.AnimationManager.State">
            <summary>
            Gets or sets the animation state for the animation manager
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.AnimationManager.TotalElapsed">
            <summary>
            Gets or sets the total elapsed time
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.AnimationManager.FrameRate">
            <summary>
            Gets or sets the frame rate in which the sprite animates
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.AnimationManager.CurrentFrame">
            <summary>
            Gets the current frame of the object
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleCustomRow">
            <summary>
            Object used to load an Animated2DSprite object that is a custom single row in a sprite sheet
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleCustomRow.FramesStartWidth">
            <summary>
            Gets or sets where in the sprite sheet the starting width is.
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleCustomRow.FramesStartHeight">
            <summary>
            Gets or sets where in the sprite sheet the starting height is.
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Animated2DSpriteLoadSingleCustomRow.SpaceBetweenFrames">
            <summary>
            Gets or Sets the distance between the frames in the sprite sheet to load.
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.TexturedEffectButtonParams">
            <summary>
            Params object containing the data required to build a TexturedEffectButton object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedEffectButtonParams.ID">
            <summary>
            Buttons ID used for determining if a button was clicked
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedEffectButtonParams.Effects">
            <summary>
            Effects to be applied to the button on hover
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedEffectButtonParams.ResetDelegate">
            <summary>
            Delegate that resets the button when the mouse is not over it
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.TexturedEffectButtonParams.PickableArea">
            <summary>
            Area of the rectable to pick
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.ColourLerpEffectParams">
            <summary>
            Models the data required to build a ColourLerpEffect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.ColourLerpEffectParams.LerpUpTo">
            <summary>
            Color to lerp down to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.ColourLerpEffectParams.LerpDownTo">
            <summary>
            Color to lerp up to
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.ColourLerpEffectParams.LerpBy">
            <summary>
            Amount to lerp by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.RotateOverTimeEffectParams">
            <summary>
            Models the data required for a scale over time effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.RotateOverTimeEffectParams.RotateBy">
            <summary>
            Amount to rotate by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.Params.KeyFrameAnimationManagerParams">
            <summary>
            Models the data required to build a KeyFrameAnimationManager object
            </summary>
        </member>
        <member name="P:GWNorthEngine.Logic.Params.KeyFrameAnimationManagerParams.KeyFrameData">
            <summary>
            Gets or sets the KeyFrameData object and also the bases frame rate
            </summary>
        </member>
        <member name="T:GWNorthEngine.Engine.Params.BaseRendererParams">
            <summary>
            Object containing the data required to build the BaseRenderer
            </summary>
        </member>
        <member name="M:GWNorthEngine.Engine.Params.BaseRendererParams.#ctor">
            <summary>
            Builds the default settings for setting up the the BaseRenderer. The default settings are below;
            ScreenHeight:			600
            ScreenWidth:			800
            MouseVisiblity:			true
            FullScreen:				false
            ContentRootDirectory:	"Content"
            WindowText:				"PLEASE FILL ME IN!"
            RunningMOdeL			Release
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.ScreenWidth">
            <summary>
            Gets or sets the initial screen width for the game
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.ScreenHeight">
            <summary>
            Gets or sets the initial screen height for the game
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.ContentRootDirectory">
            <summary>
            Gets or sets the content root directory for the game
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.WindowsText">
            <summary>
            Gets or sets the windows text for the game
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.MouseVisible">
            <summary>
            Gets or sets whether the mouse is visible in the application
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.FullScreen">
            <summary>
            Gets or sets whether the game will be run in full screen mode or note
            </summary>
        </member>
        <member name="P:GWNorthEngine.Engine.Params.BaseRendererParams.RunningMode">
            <summary>
            Gets or sets whether the game is running in Release or Debug mode
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.TexturedButton">
            <summary>
            Textured button
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedButton.#ctor(GWNorthEngine.Model.Params.TexturedButtonParams)">
            <summary>
            Building of a textured button
            </summary>
            <param name="parms">TexturedButtonParams object containing the data required to build the TexturedButton</param>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedButton.isActorOver(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines if the actor is over the button
            </summary>
            <param name="actorsPosition">Actors current position</param>
            <returns>boolean based on whether the actor is over the button</returns>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedButton.processActorsMovement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Processes the movement of the actor (Mouse/XBox Controller etc)
            </summary>
            <param name="actorsPosition">Actors current position</param>
        </member>
        <member name="M:GWNorthEngine.Model.TexturedButton.dispose">
            <summary>
            Releases the portions of the button that cause memory leaks
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.TexturedButton.ID">
            <summary>
            Gets or sets the ID of the button
            </summary>
        </member>
        <member name="T:GWNorthEngine.Utils.EnumUtils">
            <summary>
            Helpful methods for performing operations on enums
            </summary>
        </member>
        <member name="M:GWNorthEngine.Utils.EnumUtils.numberToEnum``1(System.Int32)">
            <summary>
            Gets a Enum value based on the int provided
            </summary>
            <typeparam name="T">Type of enum to lookup</typeparam>
            <param name="number">Number we are looking the value up for</param>
            <returns>Enum representation of the number</returns>
        </member>
        <member name="M:GWNorthEngine.Utils.EnumUtils.inverseValue``1(``0)">
            <summary>
            Inverses the value of the passed in enum and returns the enum version of its result
            </summary>
            <typeparam name="T">Enum type</typeparam>
            <param name="value">Value to invert</param>
            <returns>Inverted version of the enum value passed in</returns>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.ScaleOverTimeEffect">
            <summary>
            Models the data required for a scale over time effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.ScaleOverTimeEffect.#ctor(GWNorthEngine.Model.Effects.Params.ScaleOverTimeEffectParams)">
            <summary>
            Constructs a ScaleOverTimeEffect
            </summary>
            <param name="parms">ScaleOverTimeEffectParams object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.ScaleOverTimeEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.ScaleOverTimeEffect.ScaleBy">
            <summary>
            Amount to scale by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.BaseParticle2DParams">
            <summary>
            Object containing the data required to build a base 2D particle
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DParams.TimeToLive">
            <summary>
            Gets or sets the maximum time the particle can live for
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DParams.Acceleration">
            <summary>
            Gets or sets the acceleration of the particle
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DParams.Direction">
            <summary>
            Gets or sets the directional value of the particle
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseParticle2DParams.Texture">
            <summary>
            Gets or sets the texture for the particle
            </summary>
        </member>
        <member name="T:GWNorthEngine.Engine.BaseRenderer">
             <summary>
            Base renderer for an XNA based applicaton
             </summary>
        </member>
        <member name="F:GWNorthEngine.Engine.BaseRenderer.graphics">
            <summary>
            GraphicsDeviceManager object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Engine.BaseRenderer.spriteBatch">
            <summary>
            SpriteBatch object
            </summary>
        </member>
        <member name="F:GWNorthEngine.Engine.BaseRenderer.runningMode">
            <summary>
            RunningMode enum
            </summary>
        </member>
        <member name="M:GWNorthEngine.Engine.BaseRenderer.initialize(GWNorthEngine.Engine.Params.BaseRendererParams)">
            <summary>
            Initializes variables based on the parms object
            </summary>
            <param name="parms">BaseRendererParms object</param>
        </member>
        <member name="M:GWNorthEngine.Engine.BaseRenderer.Initialize">
            <summary>
            Allows the game to perform any initialization it needs to before starting to run.
            This is where it can query for any required services and load any non-graphic
            related content.  Calling base.Initialize will enumerate through any components
            and initialize them as well.
            </summary>
        </member>
        <member name="M:GWNorthEngine.Engine.BaseRenderer.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Allows the games scripting component to run and lock on to objects for mapping purposes
            </summary>
            <param name="gameTime">Provides a snapshot of timing values.</param>
        </member>
        <member name="M:GWNorthEngine.Engine.BaseRenderer.UnloadContent">
            <summary>
            UnloadContent will be called once per game and is the place to unload all content
            </summary>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.Layer">
            <summary>
            Models the data that makes up a layer of a full map
            </summary>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.Layer.#ctor(GWNorthEngine.Tools.TilePlacer.MapTile[0:,0:])">
            <summary>
            Constructs a Layer based off the xml loaded via the MapLoader
            </summary>
            <param name="tiles">Array of MapTile objects loaded from the xml</param>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.Layer.dispose">
            <summary>
            Cleans up the tiles
            </summary>
        </member>
        <member name="P:GWNorthEngine.Tools.TilePlacer.Layer.Tiles">
            <summary>
            Gets or sets the tiles used to draw the map
            </summary>
        </member>
        <member name="T:GWNorthEngine.Scripting.Utils.ScriptUtils">
            <summary>
            Helpful methods for scripting
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Utils.ScriptUtils.getMethodParameterInfo(System.Reflection.ParameterInfo[],System.Text.StringBuilder@)">
            <summary>
            Retrieves the parameter information for a method used for displaying help
            </summary>
            <param name="paramInfos">ParameterInfo object array of the parameter for the methods</param>
            <param name="stringBuilder">StringBuilder object reference that we add to for output</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.Utils.ScriptUtils.getPropertyParameterInfo(System.Reflection.ParameterInfo[],System.Text.StringBuilder@)">
            <summary>
            Retrieves the parameter information for a property used for displaying help
            </summary>
            <param name="paramInfos">ParameterInfo object array of the parameter for the methods</param>
            <param name="stringBuilder">StringBuilder object reference that we add to for output</param>
        </member>
        <member name="M:GWNorthEngine.Scripting.Utils.ScriptUtils.scrubStringParameter(System.String,System.Type)">
            <summary>
            Scrubs the excess crap off of a value such as the data type, and opening and closing braces
            </summary>
            <param name="value">Value to scrub</param>
            <param name="paramType">Type of the value</param>
            <returns>Clean parameter</returns>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.ScaleOverTimeEffectParams">
            <summary>
            Models the data required for a scale over time effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.ScaleOverTimeEffectParams.ScaleBy">
            <summary>
            Amount to scale by
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.Params.FadeEffectParams">
            <summary>
            Models the data required to build a fade effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.FadeEffectParams.State">
            <summary>
            State of the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.FadeEffectParams.TotalTransitionTime">
            <summary>
            Total time the fade should take
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.Params.FadeEffectParams.OriginalColour">
            <summary>
            Original colour to base the effect off of
            </summary>
        </member>
        <member name="T:GWNorthEngine.Logic.KeyFrameAnimationManager">
            <summary>
            Animation manager class which handles the animation steps for anything animated between a defined set of frames
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameAnimationManager.#ctor(GWNorthEngine.Logic.Params.KeyFrameAnimationManagerParams)">
            <summary>
            Constructs a KeyFrameAnimationManager object based on the KeyFrameAnimationManagerParms object passed in
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameAnimationManager.setNextFrame(System.Int32)">
            <summary>
            Handles incrementing the animation steps within the KeyFrameData object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameAnimationManager.resetAnimation(System.Boolean)">
            <summary>
            Resets the animation sequence that the KeyFrameAnimationManager is controlling
            </summary>
            <param name="cockAnimation">Determines if we are setting the animation up to fire right away as soon as a "Play" state is
            entered or whether we want it set to replay the whole wait time</param>
        </member>
        <member name="M:GWNorthEngine.Logic.KeyFrameAnimationManager.resetAnimation(System.Int32,System.Boolean)">
            <summary>
            Resets the animation sequence that the KeyFrameAnimationManager is controlling and has an option to set the animation so 
            that it will fire as soon the state is changed to a "play" state
            </summary>
            <param name="maxFrameCount">NOT USED BUT required as we are overloading the base</param>
            <param name="cockAnimation">Determines if we are setting the animation up to fire right away as soon as a "Play" state is
            entered or whether we want it set to replay the whole wait time</param>
        </member>
        <member name="P:GWNorthEngine.Logic.KeyFrameAnimationManager.KeyFrameData">
            <summary>
            Gets or sets the KeyFrameData object as well as sets the parents current frame, and frame rate
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.BaseModelParams">
            <summary>
            Object containing the data required to build a 3D model
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Params.BaseModelParams.#ctor">
            <summary>
            Builds the default settings for the ModelParams. The default settings are below;
            Scale:		new Vector3(1f)
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseModelParams.Model">
            <summary>
            Gets or sets the core XNA Model used for rendering
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseModelParams.Position">
            <summary>
            Gets or sets the position of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseModelParams.Rotation">
            <summary>
            Gets or sets the rotation of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseModelParams.Scale">
            <summary>
            Gets or sets the scale of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.BaseModelParams.Visible">
            <summary>
            Gets or sets whether the model is to be drawn
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.ConstantSpeedParticle">
            <summary>
            Models the data required to build a ConstantSpeedParticle
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.ConstantSpeedParticle.#ctor(GWNorthEngine.Model.Params.BaseParticle2DParams)">
            <summary>
            Constructs a particle that moves in a constant speed
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:GWNorthEngine.Model.ConstantSpeedParticle.update(System.Single)">
            <summary>
            Moves the particle in the constant direction
            </summary>
            <param name="elapsed">Time elapsed since the last frame</param>
        </member>
        <member name="T:GWNorthEngine.Model.AcceleratingParticle">
            <summary>
            Models a particle that accelerates as its life progresses
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.AcceleratingParticle.#ctor(GWNorthEngine.Model.Params.BaseParticle2DParams)">
            <summary>
            Constructs an Accelerating particle
            </summary>
            <param name="parms">BaseParticle2DParms object</param>
        </member>
        <member name="M:GWNorthEngine.Model.AcceleratingParticle.update(System.Single)">
            <summary>
            Updates the particles position, gaining speed as its life progresses
            </summary>
            <param name="elapsed">Elapsed time</param>
        </member>
        <member name="T:GWNorthEngine.Audio.Params.MusicEngineParams">
            <summary>
            Object containing the required data to build a MusicEngine instance
            </summary>
        </member>
        <member name="M:GWNorthEngine.Audio.Params.MusicEngineParams.#ctor">
            <summary>
            Builds the default settings for setting up a MusicEngine. The default settings are listed below.
            
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.MusicEngineParams.PlayList">
            <summary>
            Gets or sets the list of Song objects to play in the music engine
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.MusicEngineParams.StartTrack">
            <summary>
            Gets or sets the track to start playing in the music engine
            </summary>
        </member>
        <member name="P:GWNorthEngine.Audio.Params.MusicEngineParams.State">
            <summary>
            Gets or sets the state of the music engine
            </summary>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.MapLoader">
            <summary>
            Loads a TilePlacer map file
            </summary>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapLoader.loadMapMetadata(System.Xml.XmlDocument,System.Int32@,System.Int32@)">
            <summary>
            Loads the metadata information from an XmlDocument
            </summary>
            <param name="map">XmlDocument containing the metadata information</param>
            <param name="height">Height of the map</param>
            <param name="width">Width of the map</param>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapLoader.loadLayer(Microsoft.Xna.Framework.Content.ContentManager,System.Xml.Linq.XElement,System.Int32,System.Int32)">
            <summary>
            Loads a layer from the xml
            </summary>
            <param name="content">ContentManager object to load textures</param>
            <param name="xmlLayer">XML of the layer to load</param>
            <param name="height">Height of the layer</param>
            <param name="width">Width of the layer</param>
            <returns>Layer object</returns>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapLoader.load(Microsoft.Xna.Framework.Content.ContentManager,System.String)">
            <summary>
            Loads a TilePlacer map from the file system
            </summary>
            <param name="content">ContentManager used to load textures for the map</param>
            <param name="mapName">Name of the map to load</param>
            <returns>LoadResult object containing the data that resulted from the loading of the map</returns>
        </member>
        <member name="M:GWNorthEngine.Tools.TilePlacer.MapLoader.initTiles``1(GWNorthEngine.Tools.TilePlacer.MapTile[0:,0:],GWNorthEngine.Tools.TilePlacer.MapLoader.TileConstructor{``0})">
            <summary>
            Initializes the type of Tiles passed in based on the MapTile object loaded from the Load(...) process
            </summary>
            <typeparam name="T">Type of object array we are going to create</typeparam>
            <param name="tiles">MapTile array that is used to create the new typed array</param>
            <param name="objectConstruction">TileConstructor delegate used to convert the MapTile object to the subclass passed in as T</param>
            <returns>T[,] type of objects created from MapTiles[,] passed in</returns>
        </member>
        <member name="T:GWNorthEngine.Tools.TilePlacer.MapLoader.TileConstructor`1">
            <summary>
             Delegate used for the construction of an object type that represents a Tile from the TilePlacer
            </summary>
            <typeparam name="T">Type of object we are going to create that is a subclass of MapTile</typeparam>
            <param name="tile">MapTile object that will be used to create the child class</param>
            <returns>newly created object of the Type passed in</returns>
        </member>
        <member name="T:GWNorthEngine.Scripting.Model.ScriptException">
            <summary>
            Used to handle exceptions thrown within the script management
            </summary>
        </member>
        <member name="M:GWNorthEngine.Scripting.Model.ScriptException.#ctor(System.String)">
            <summary>
            Constructor to create a new ScriptException
            </summary>
            <param name="message">Message to send to the console</param>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.FadeEffect">
            <summary>
            Models the data required for a fade effect
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.FadeEffect.#ctor(GWNorthEngine.Model.Effects.Params.FadeEffectParams)">
            <summary>
            Constructs a FadeEffect object
            </summary>
            <param name="parms">FadeEffectParms object</param>
        </member>
        <member name="M:GWNorthEngine.Model.Effects.FadeEffect.update(System.Single)">
            <summary>
            Runs the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.FadeEffect.State">
            <summary>
            State of the effect
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.FadeEffect.TotalTransitionTime">
            <summary>
            Total time the fade should take
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.FadeEffect.ElapsedTransitionTime">
            <summary>
            Elapsed time the fade has taken
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Effects.FadeEffect.OriginalColour">
            <summary>
            Original colour to base the effect off of
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Effects.FadeEffect.FadeState">
            <summary>
            Fade State
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Effects.FadeEffect.FadeState.In">
            <summary>
            Fade In
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.Effects.FadeEffect.FadeState.Out">
            <summary>
            Fade out
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.Params.Text2DParams">
            <summary>
            Object containing the data required to write text to the screen
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Text2DParams.Font">
            <summary>
            Gets or sets the font to write with
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.Params.Text2DParams.WrittenText">
            <summary>
            Gets or sets the text to be written
            </summary>
        </member>
        <member name="T:GWNorthEngine.Model.BaseModel">
            <summary>
            Basic 3D model class
            </summary>
        </member>
        <member name="F:GWNorthEngine.Model.BaseModel.model">
            <summary>
            Internal XNA Model object
            </summary>
        </member>
        <member name="M:GWNorthEngine.Model.BaseModel.#ctor(GWNorthEngine.Model.Params.BaseModelParams)">
            <summary>
            Builds a Model based on the parms specified
            </summary>
            <param name="parms"></param>
        </member>
        <member name="M:GWNorthEngine.Model.BaseModel.render(GWNorthEngine.Logic.Camera3D)">
            <summary>
            Renders the model
            <param name="camera">Camera the model uses to render with</param>
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseModel.Position">
            <summary>
            Gets or sets the position of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseModel.Rotation">
            <summary>
            Gets or sets the rotation of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseModel.Scale">
            <summary>
            Gets or sets the scale of the model
            </summary>
        </member>
        <member name="P:GWNorthEngine.Model.BaseModel.Visible">
            <summary>
            Gets or sets whether the model is to be drawn
            </summary>
        </member>
        <member name="T:GWNorthEngine.Input.MouseButton">
            <summary>
            Enum to represent available Mouse buttons which are used in the InputManager
            </summary>
        </member>
        <member name="F:GWNorthEngine.Input.MouseButton.Left">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:GWNorthEngine.Input.MouseButton.Right">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:GWNorthEngine.Input.MouseButton.Middle">
            <summary>
            Middle mouse button
            </summary>
        </member>
        <member name="T:GWNorthEngine.GUI.CheckBox">
            <summary>
            Models a CheckBox
            </summary>
        </member>
        <member name="M:GWNorthEngine.GUI.CheckBox.#ctor(GWNorthEngine.GUI.Params.CheckBoxParams)">
            <summary>
            Constructs a CheckBox object based on the params
            </summary>
            <param name="parms">CheckBoxParams object</param>
        </member>
        <member name="M:GWNorthEngine.GUI.CheckBox.update(System.Single)">
            <summary>
            Updates the Checkbox
            </summary>
            <param name="elapsed">Time elapsed since the last call</param>
        </member>
        <member name="M:GWNorthEngine.GUI.CheckBox.render(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Renders the CheckBox
            </summary>
            <param name="spriteBatch">SpriteBatch object used for rendering</param>
        </member>
        <member name="P:GWNorthEngine.GUI.CheckBox.Checked">
            <summary>
            Whether or not the check box is checked or unchecked
            </summary>
        </member>
    </members>
</doc>
